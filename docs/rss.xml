<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>AI Monkey's Tech Blog</title><link>https://ai-monkey-coder.github.io</link><description>A tech blog with science and engineering</description><copyright>AI Monkey's Tech Blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://ai-monkey-coder.github.io/icon.svg</url><title>avatar</title><link>https://ai-monkey-coder.github.io</link></image><lastBuildDate>Sat, 13 Jul 2024 07:52:07 +0000</lastBuildDate><managingEditor>AI Monkey's Tech Blog</managingEditor><ttl>60</ttl><webMaster>AI Monkey's Tech Blog</webMaster><item><title>Build CLI for Synology NAS using Golang</title><link>https://ai-monkey-coder.github.io/post/Build%20CLI%20for%20Synology%20NAS%20using%20Golang.html</link><description>## Dependencies&#13;
You have to install ```brew install FiloSottile/musl-cross/musl-cross``` first. `musl-cross` is a GitHub project providing pre-built cross-compilation toolchains using musl libc. It allows developers to easily create statically linked, portable binaries for various architectures, which is useful for minimal applications, embedded systems, and containers.&#13;
&#13;
&#13;
## Build Command&#13;
```sh&#13;
  CC=x86_64-linux-musl-gcc \&#13;
  CXX=x86_64-linux-musl-g++ \&#13;
  GOARCH=amd64 \&#13;
  GOOS=linux \&#13;
  CGO_ENABLED=1 \&#13;
  go build -ldflags '-linkmode external -extldflags -static'&#13;
```&#13;
&#13;
### Explaination:&#13;
&#13;
&#13;
1. `CC=x86_64-linux-musl-gcc`: Sets the C compiler to use the musl-based GCC for x86_64 Linux.&#13;
&#13;
2. `CXX=x86_64-linux-musl-g++`: Sets the C++ compiler to use the musl-based G++ for x86_64 Linux.&#13;
&#13;
3. `GOARCH=amd64`: Specifies the target architecture as 64-bit x86 (AMD64).&#13;
&#13;
4. `GOOS=linux`: Sets the target operating system to Linux.&#13;
&#13;
5. `CGO_ENABLED=1`: Enables cgo, allowing Go to call C code.&#13;
&#13;
6. `go build`: The actual Go build command.&#13;
&#13;
7. `-ldflags '-linkmode external -extldflags -static'`: &#13;
   - `-linkmode external`: Uses external linking mode.&#13;
   - `-extldflags -static`: Passes the `-static` flag to the external linker, resulting in a statically linked binary.&#13;
&#13;
This command compiles a Go program using the musl C library toolchain, targeting 64-bit Linux, with all dependencies statically linked into the final binary. &#13;
&#13;
&#13;
### Reference&#13;
&#13;
[https://www.afox.dev/posts/compiling-go-for-synology-nas](Ref)。</description><guid isPermaLink="true">https://ai-monkey-coder.github.io/post/Build%20CLI%20for%20Synology%20NAS%20using%20Golang.html</guid><pubDate>Sat, 13 Jul 2024 07:51:34 +0000</pubDate></item><item><title>Test Blog</title><link>https://ai-monkey-coder.github.io/post/Test%20Blog.html</link><description>Test blog。</description><guid isPermaLink="true">https://ai-monkey-coder.github.io/post/Test%20Blog.html</guid><pubDate>Fri, 05 Jul 2024 20:26:39 +0000</pubDate></item></channel></rss>